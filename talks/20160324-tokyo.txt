Hi everyone, my name is Andrew, and I work for the Financial Times. This year I am living in Tokyo and helping Nikkei to build the next generation of nikkei.com, but today I am going to talk about some work I did last year at the FT.
As the web becomes a bigger and bigger part of your business, a lot of companies find web development becomes very challenging, and most end up developing some variation of components, frameworks or libraries to allow them to sustain a consistent quality, and avoid technical debt over-running the architecture of their applications.  The FT created one such approach which we call Origami.
I wouldn't normally talk with a script, but because we've pre-translated this talk for the caption system, I will be sticking to the script today. We'd love to get your feedback on whether this is a better way of experiencing talks in English or whether you'd prefer an interpreter.
When I graduated from university I set up a consultancy company called Assanka. That was acquired by the FT in 2011.  For the last few years I've had responsibility for front end standards at the FT, which has proven to be an excellent way of feeding my OCD.  I'm the kind of person that things M&Ms should be sorted by colour before you eat them.
In January I was elected to the Technical Architecture Group at the W3C, which means I am one of nine people responsible for guiding the development of the World Wide Web and its architecture, for the benefit of the developer community.  We're currently looking at issues like protection of user privacy and security on the web, and new browser features like the Automotive API, which would allow a web browser to interface with your car.
So I love standards, and I'd love to talk to you about standardising front end development, or indeed any aspect of the web platform.
But today we're focusing on standards at the scale of a single organisation, and these are just as important as standards like HTML that make the web work.  Component standards create a new higher level abstraction to web development, which makes building ever more complex things possible.
At the FT, the need for more complexity came from three sources.
First, our customers are now using many more devices, operating systems and browsers to access FT content.  They are also not just accessing it through our own websites, but also via third party platforms like Flipboard, Facebook instant articles, Apple news and so on.  This all combines to give us a massive number of permutations of customer that we might have to deal with.
Second, as the web has matured it has become more and more important for websites to invest in user experience.  One interesting case study in the trade off between ease of implementation and quality of user experience is in selection fields for honorifics. In the English-speaking world most people have an 'honorific' that precedes their name, and while Mr, Ms and Dr cover about 99% of names, there are literally thousands of possible edge cases.  One of my colleagues discovered this example on a form when he was booking a hotel.  It just goes on, and on, and on, and on. The problem here is that the developer has chosen a solution that is easy for them, not for the user.  This used to be OK, but not any more.
Finally, our customers have an expectation that our services will be faster than ever before.  A website built in 2006 which was really fast back then would seem very slow today, even if the performance of that site hadn't changed. Expectations are getting higher, so we have to do more work to meet them.
The complexity created by these changes has resulted in a lot of problems.
At the FT we ended up repeating work over and over again. For example, I think we have at least four image gallery implementations, and I know the BBC built at least six before they managed to standardise on a single component.
We found that complex systems hung around for a really long time, because no-one remembered how they worked, and everyone was scared to touch them.  There was a cookie that was already deprecated when I first started working with the FT in 2006, and it took until 2015 for us to finally stop setting it on each login.
Unique, complex systems demand experts - and the experts end up getting very stressed and very busy.  We also found that development of complex systems without good planning meant that they would end up being used for things they weren't designed for, like fitting a square peg into a round hole.
We did an audit of our overlays on ft.com, and looked just at the close icon in the top right of the overlay panel.  It should be in the same place, use the same icon, and be implemented in the same way.  But the reality is that while they look MOSTLY the same, the implementations are totally different.  Imagine how many different implementations we have across 150 public websites built over the last 20 years.
All this complexity means that we failed to deliver something that is really important. When a customer comes to an FT site, it should look and behave the same as any other FT site.  This consistent brand experience recognises that from the customer's perspective they don't care which part of the FT they're interacting with - it's all the FT, it should all be the same.
And of course all the problems of complexity mean that we can't deliver developer productivity either.  So we build terrible products very slowly, and I'd rather build awesome products really fast.  So the objectives here are to bring a consistent brand experience to our users, and speed up development for our engineering teams.
Before I look at how our component system works, let's see some examples of components that we've built.  Forms includes things like validity indicators, labels, placeholders, help text, and accessibility metadata.
A standard header is one of our most important components (and incidentally this is a new one that you will currently see only on next.ft.com).
Standard footer to go with the standard header.  A grid to line everything up in a consistent way.  A standard approach to button design is another example of expressing a consistent design language through components.
So to recap we have increased challenges and demands, this leads to increased complexity, and results in multiple problems. We know we need components to solve this: to achieve a consistent brand experience and increase developer productivity.  So we designed an approach to building components, which we call Origami.
This isn't just about making components, which is why Origami is actually three things - there's a written specification so that implementation follows specification, and doesn't just rely on unwritten conventions.  There are tools that support the specification by linting, testing, verifying, scaffolding and indexing components - to make sure they are following the spec.  And then there are the components themselves.
Because we work with lots of third party agencies who build content for the FT, we can't standardise on a single backend technology.  We have sites written in Node, Python, Java, PHP, Ruby, and others.  We also can't standardise on an opinionated front end framework like React or jQuery, because this will typically reduce developer adoption of the technology unless they are advocates for that particular framework.
So we start with a simple, standard build process for front end modules which aims to be forwards compatible with Web Components.  This includes Bower for package management, because npm still struggles to maintain a completely flat dependency structure, and gulp for orchestration.  We build CSS using Sass, and JavaScript using CommonJS and Browserify (though we actually recently changed to webpack).
These are all standard tools, but if there's a way to make things easier we like to do that so we wrapped all these tools in a single tool we call Origami build tools. You can install that with npm, and it's a public project so you're welcome to use it too if you want.  And again, because we want to make developers' lives easier, OBT can be used both as a command line executable, and also as a gulp plugin.
As well as the build process, we also standardise syntax rules, which Origami build tools will validate and lint as much as possible. These are some of our JavaScript rules - like no globals, namespaced events, and performance rules like being careful about when we modify the DOM.
In the case of CSS, we use BEM for class naming, and have various rules like minimising the specificity of selectors, and providing responsive mixins and ARIA states.
To try and make it easier to write JavaScript and also to improve the experience of users with older browsers, we also added the "Cuts the mustard" technique created by the BBC News team. This technique involves writing a test in JavaScript that will only pass in browsers with good JavaScript support.  When it fails, you don't even load your JavaScript, so users get an experience similar to what they would get if they disabled JavaScript in their browser.
This is the test we use for most new products at the FT.  It passes in IE9, but fails in IE8.
Finally, the spec demands that components release versions using semantic versioning. This is a versioning system that will be familiar to anyone that has published a module on npm. By following the semver rules, we can make it possible for developers to intuitively understand how risky it is to upgrade to a new version of a component.  To find out more about semver, take a look at semver.org.
So to recap: the spec defines a standard build process, enforces quality standards for syntax and encapsulation, defines a mechanism for progressive enhancement and support for old browsers, and uses semantic versioning to bring excellent governance to releases.
On top of this, we add services.  Most importantly we have a registry of our components.  You can see in this list some of the most recently updated components, their current version and when that version was released.
The registry automatically gets information about components by scanning all our git repos, and building every released version of every module.  We can then bring all this information together and display it on a single webpage.  This is an example of our forms component.  The first thing you can see is a demo so you can understand what the component does by simply interacting with it.
Further down the page we show information about getting started with the component, a lot of useful metadata such as the dependency list and the total bundle sizes, and the readme from the repo.
All this is powered by the build service, another service we created which can run the origami build tools in the cloud to save you doing it yourself.  Just by adding a SCRIPT tag to your HTML page, you can import whatever compiled modules you need, including all their dependencies.
Take this example. The build service will create a new installation containing the latest version of o-tweet, the highest version of o-header that is higher than 1.3.7 but lower than 2, and the highest version of o-forms that has a major version of 2.  In this way, build service URLs can actually enable automatic upgrading of components as new versions are released, and you can control that behaviour via semver expressions in the URL itself.
Once the build service has chosen the appropriate versions and installed them along with their dependencies, it will run webpack to combine the JavaScript into a single JavaScript bundle file, and will then serve that file as the HTTP response, with support for gZip, CDN caching and HTTP/2.
The automatic upgrades mean that we can sometimes roll out changes, for example to change the Pearson footer branding to Nikkei, without making product releases.
These services, added to the rules we establish in the specification, allow us to achieve our two goals: a consistent brand experience and increased developer productivity.  But they bring other benefits as well. When you have a best-practice framework for consistent branding, it supports best practice in defining and maintaining the brand itself as well. We also achieve better compliance with disability rights legislation and in practical terms better support for blind and partially sighted users and those who cannot use a mouse.
Finally, reducing the technical variations between products makes it easier for engineers to move from one project to another, and improves maintainability. That's what we can do when we don't cut corners, and that's Origami.

